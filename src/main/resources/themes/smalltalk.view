<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <meta name="description" content=""/>
    <meta content="tinystruct 2.0 (http://tinystruct.org)" name="generator"/>
    <title>Small Talk</title>
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet"/>
    <!-- Bootstrap core CSS -->
    <link href="/scripts/bootstrap/bootstrap.min.css?raw=true" rel="stylesheet"/>
    <link href="/scripts/highlight/github-dark-dimmed.css" rel="stylesheet"/>

    <!-- Custom styles for this template -->
    <style type="text/css">
        #list ::-moz-selection {
            background: #2583AD;
        }

        #list ::selection {
            background: #2583AD;
        }

        #list {
            overflow-x: hidden;
            max-height: 350px;
            padding: 10px;
            background: #f5f5f5;
            border: 1px solid #f5f5f5;
            resize: vertical;
            margin: 10px 0 10px 0;
        }

        #list.light-green {
            background: #000;
            color: #00ff00;
        }

        #list.light-green ul {

        }

        #list.light-green ul li {

        }

        #list.light-green ul li span.content {
            color: #fff;
        }

        #list.dark-green {
            background: #000;
            color: #a4dba8;
        }

        #list.dark-green ul {

        }

        #list.dark-green ul li {

        }

        #list.dark-green ul li span.content {
            color: #fff;
        }

        #list ul {
            list-style: none;
            padding-left: 0;
            margin-bottom: 0;
        }

        #list ul li {
            padding: 4px 5px;
        }

        #list ul li pre {
            color: #ffffff;
            background-color: #22272e;
        }

        #list ul li.even, #list ul li.chat-gpt {
            background: #e7e7e7;
        }

        #list.dark-green ul li.even, #list.light-green ul li.even, #list.dark-green ul li.chat-gpt, #list.light-green ul li.chat-gpt {
            background: #033300;
        }

        #list ul li span.time {
        }

        #list ul li span.name {
        }

        #list ul li span.content {
        }

        ul.nav li a.theme svg {
            width: 1em;
            height: 1em;
            display: inline-block;
        }

        #sender {
            border-color: #ddd;
            border-radius: 4px 4px 0 0;
            border-width: 1px;
            box-shadow: none;
            margin-left: 0;
            margin-right: 0;
        }

        body > .container {
            padding-top: 75px;
        }

        body > .container img {
            width: 100%;
            max-width: 100%;
        }

        #matrix {
            position: absolute;
            right: 0;
            bottom: 0;
            width: 77px;
            height: 77px;
            border: 1px solid #337ab7;
            display: none;
            text-align: center;
            color: #337ab7;
            background: #fff;
        }

        .note {
            position: relative
        }

        .pad {
            margin: 10px 0;
            position: relative;
        }

        .text {
            min-height: 60px;
            _height: 60px;
            padding: 10px;  /* Remove left/right padding */
            font-size: 12px;
            color: #777;
            border: 1px solid #d9d9d9;
            outline: 0;
            background: #fff;
            position: relative;
            border-radius: 5px;
        }

        .text:hover, .hover .text {
            border-color: #337ab7;
            caret-color: #337ab7;
        }

        .arrowline:hover, .hover .arrowline {
            border-color: transparent transparent #337ab7 transparent;
        }

        .arrowbox {
            width: 20px;
            height: 20px;
            position: absolute;
            left: 52px;
            top: -12px;
        }

        .arrow {
            width: 0;
            height: 0;
            font-size: 0;
            line-height: 0;
            position: absolute;
            overflow: hidden;
        }

        .arrowline {
            top: -1px;
            border-style: solid solid solid;
            border-width: 7px;
            border-color: transparent transparent #d9d9d9 transparent;
        }

        .arrowbg {
            top: 0.35px;
            border-style: solid solid solid;
            border-width: 7px;
            border-color: transparent transparent #fff transparent;
        }

        .file-loading {
            top: 0;
            right: 0;
            width: 25px;
            height: 25px;
            font-size: 999px;
            text-align: right;
            color: #fff;
            background: transparent url('/scripts/bootstrap/fileinput/loading.gif') top left no-repeat;
            border: none;
        }

        .file-object {
            margin: 0 0 -5px 0;
            padding: 0;
        }

        .btn-file {
            position: absolute;
            left: 0;
            bottom: 0;
            overflow: hidden;
            background: transparent;
            border: none;
            color: #337ab7;
            padding: 0;
            margin: 0;
            transition: all 0.3s ease;
            z-index: 1;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .btn-file input[type=file] {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            opacity: 0;
            cursor: pointer;
            z-index: 2;
        }

        .btn-file:hover {
            color: #23527c;
            transform: scale(1.1);  /* Only scale, no vertical translation */
        }

        .btn-file:focus {
            outline: 2px solid #337ab7;
            outline-offset: 2px;
        }

        .btn-file:focus:not(:focus-visible) {
            outline: none;
        }

        /* Make sure the icon is properly centered */
        .btn-file i {
            display: inline-block;
            vertical-align: middle;
        }

        #button {
            position: absolute;
            right: 10px;
            bottom: 10px;  /* Change from top: 50% to bottom: 10px */
            transform: none;  /* Remove vertical centering transform */
            z-index: 1;
        }

        .attachment-label {
            display: none;
        }

        .file-caption-name {
            display: inline-block;
            overflow: hidden;
            height: 20px;
            word-break: break-all;
        }

        .input-group-lg .file-caption-name {
            height: 25px;
        }

        .file-preview-detail-modal {
            text-align: left;
        }

        .file-error-message {
            color: #a94442;
            background-color: #f2dede;
            margin: 5px;
            border: 1px solid #ebccd1;
            border-radius: 4px;
            padding: 15px;
        }

        .file-error-message pre, .file-error-message ul {
            margin: 0;
            text-align: left;
        }

        .file-error-message pre {
            margin: 5px 0;
        }

        .file-caption-disabled {
            background-color: #EEEEEE;
            cursor: not-allowed;
            opacity: 1;
        }

        .file-preview {
            border-radius: 5px;
            border: 1px solid #ddd;
            padding: 5px;
            width: 100%;
            margin-bottom: 5px;
        }

        .file-preview-frame {
            display: table;
            margin: 8px;
            height: 160px;
            border: 1px solid #ddd;
            box-shadow: 1px 1px 5px 0 #a2958a;
            padding: 6px;
            float: left;
            text-align: center;
            vertical-align: middle;
        }

        .file-preview-frame:not(.file-preview-error):hover {
            box-shadow: 3px 3px 5px 0 #333;
        }

        .file-preview-image {
            height: 160px;
            vertical-align: middle;
        }

        .file-preview-text {
            text-align: left;
            width: 160px;
            margin-bottom: 2px;
            color: #428bca;
            background: #fff;
            overflow-x: hidden;
        }

        .file-preview-other {
            display: table-cell;
            text-align: center;
            vertical-align: middle;
            width: 160px;
            height: 160px;
            border: 2px solid #999;
            border-radius: 30px;
        }

        .file-preview-other:hover {
            opacity: 0.8;
        }

        .file-actions, .file-other-error {
            text-align: left;
        }

        .file-icon-lg {
            font-size: 1.2em;
        }

        .file-icon-2x {
            font-size: 2.4em;
        }

        .file-icon-4x {
            font-size: 4.8em;
        }

        .file-input-new .file-preview, .file-input-new .close, .file-input-new .glyphicon-file,
        .file-input-new .fileinput-remove-button, .file-input-new .fileinput-upload-button,
        .file-input-ajax-new .fileinput-remove-button, .file-input-ajax-new .fileinput-upload-button {
            display: none;
        }

        .file-thumb-loading {
            background: transparent url('../img/loading.gif') no-repeat scroll center center content-box !important;
        }

        .file-actions {
            margin-top: 15px;
        }

        .file-footer-buttons {
            float: right;
        }

        .file-upload-indicator {
            padding-top: 2px;
            cursor: default;
            opacity: 0.8;
            width: 60%;
        }

        .file-upload-indicator:hover {
            font-weight: bold;
            opacity: 1;
        }

        .file-footer-caption {
            display: block;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            width: 160px;
            text-align: center;
            padding-top: 4px;
            font-size: 11px;
            color: #777;
            margin: 5px auto 10px auto;
        }

        .file-preview-error {
            opacity: 0.65;
            box-shadow: none;
        }

        .file-preview-frame:not(.file-preview-error) .file-footer-caption:hover {
            color: #000;
        }

        .file-drop-zone {
            border: 1px dashed #aaa;
            border-radius: 4px;
            height: 100%;
            text-align: center;
            vertical-align: middle;
            margin: 12px 15px 12px 12px;
            padding: 5px;
        }

        .file-drop-zone-title {
            color: #aaa;
            font-size: 40px;
            padding: 85px 10px;
        }

        .file-highlighted {
            border: 2px dashed #999 !important;
            background-color: #f0f0f0;
        }

        .file-uploading {
            background: url('../img/loading-sm.gif') no-repeat center bottom 10px;
            opacity: 0.65;
        }

        .file-thumb-progress .progress, .file-thumb-progress .progress-bar {
            height: 10px;
            font-size: 9px;
            line-height: 10px;
        }

        .file-thumbnail-footer {
            position: relative;
        }

        .file-thumb-progress {
            position: absolute;
            top: 22px;
            left: 0;
            right: 0;
        }

        /* IE 10 fix */
        .btn-file ::-ms-browse {
            width: 100%;
            height: 100%;
        }

        #text {
            min-height: 40px;
            padding: 0 0 0 15px;  /* Add padding for the buttons */
            width: 100%;
            font-style: Consolas;
            font-family: monospace;
            --caret-color: transparent;
        }

        #text:focus {
            outline: none;
        }

        #cursor {
            width: intrinsic; /* Safari/WebKit uses a non-standard name */
            width: -moz-max-content; /* Firefox/Gecko */
            width: -webkit-max-content; /* Chrome */
            width: max-content;
            font-family: monospace;

            border: 1px solid #00ff00;
            background-color: none;

            height: 17px;
            float: left;
            color: #fff;
            position: absolute;
            left: 0;
            top: 0;
            margin: 10px;
            display: none;
        }

        #cursor.focus {
            border: 1px solid #00ff00;
            background-color: #00ff00;
            color: #00ff00;
        }

        ul#messages > li.pre-wrapper {
            overflow-x: auto !important;
            white-space: pre-wrap !important; /* Since CSS 2.1 */
            white-space: -moz-pre-wrap !important; /* Mozilla, since 1999 */
            white-space: -pre-wrap !important; /* Opera 4-6 */
            white-space: -o-pre-wrap !important; /* Opera 7 */
            word-wrap: break-word !important; /* Internet Explorer 5.5+ */
        }

        ul#messages .content ul {

        }

        ul#messages .content ul li {
            white-space: pre-wrap !important; /* Since CSS 2.1 */
            white-space: -moz-pre-wrap !important; /* Mozilla, since 1999 */
            white-space: -pre-wrap !important; /* Opera 4-6 */
            white-space: -o-pre-wrap !important; /* Opera 7 */
            word-wrap: break-word !important; /* Internet Explorer 5.5+ */
        }

        p, pre {
            margin: 0;
        }

        /* Sidebar Styles */
        .sidebar {
            position: fixed;
            left: -250px;
            top: 0;
            width: 250px;
            height: 100%;
            background: #2c3e50;
            transition: all 0.3s ease;
            z-index: 1040;
            padding-top: 60px;
            box-shadow: 3px 0 6px rgba(0,0,0,0.1);
        }

        .sidebar.active {
            left: 0;
        }

        .sidebar-toggle {
            position: fixed;
            left: 15px;
            top: 5px;
            padding: 11px;
            z-index: 1051;
            cursor: pointer;
            border-radius: 30px;
            width: 42px;
            height: 42px;
        }

        .sidebar-toggle:hover {
            background: rgba(255,255,255,0.1);
        }

        .sidebar-toggle span {
            display: block;
            width: 20px;
            height: 2px;

            background: #5e5e5e;
            margin: 4px 0;
            transition: all 0.3s ease;
        }

        .sidebar-toggle.active span {
            background: #fff;
        }

        .sidebar-toggle.active span:nth-child(1) {

        }

        .sidebar-toggle.active span:nth-child(2) {

        }

        .sidebar-toggle.active span:nth-child(3) {

        }

        .sidebar-header {
            padding: 0 20px;
            color: #ecf0f1;
            border-bottom: 1px solid #34495e;
        }

        .sidebar-menu {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .sidebar-menu li {
            padding: 15px 20px;
            color: #ecf0f1;
            border-bottom: 1px solid #34495e;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .sidebar-menu li:hover {
            background: #34495e;
        }

        .sidebar-menu li i {
            margin-right: 10px;
        }

        .sidebar-section {
            padding: 20px;
            color: #ecf0f1;
        }

        .sidebar-section h3 {
            margin-top: 0;
            color: #3498db;
            font-size: 16px;
        }

        .online-users {
            list-style: none;
            padding: 0;
        }

        .online-users li {
            padding: 8px 0;
            display: flex;
            align-items: center;
        }

        .user-status {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .status-online {
            background: #2ecc71;
        }

        .status-offline {
            background: #95a5a6;
        }

        /* Adjust main content when sidebar is active */
        .content-wrapper {
            transition: all 0.3s ease;
            margin-left: 0;
            width: 100%;
        }

        .content-wrapper.shifted {
            margin-left: 250px;
            width: calc(100% - 250px);
        }

        /* Navbar adjustments */
        .navbar-default {
            transition: all 0.3s ease;
            width: 100%;
            position: fixed;
            top: 0;
            right: 0;
        }

        .navbar-default.shifted {
            width: calc(100% - 250px);
            margin-left: 250px;
        }

        /* Container adjustments */
        .container {
            transition: all 0.3s ease;
            width: 100%;
            max-width: 1170px;
            padding-right: 15px;
            padding-left: 15px;
            margin-right: auto;
            margin-left: auto;
        }

        .container.shifted {
            margin-left: 250px;
            width: calc(100% - 250px);
            max-width: calc(1170px - 250px);
        }

        /* List adjustments */
        #list {
            transition: all 0.3s ease;
            width: 100%;
        }

        @media (max-width: 768px) {
            .sidebar {
                left: -100%;
                width: 100%;
                z-index: 1050;
            }

            .sidebar.active {
                left: 0;
            }

            .content-wrapper.shifted,
            .navbar-default.shifted,
            .container.shifted {
                margin-left: 0;
                width: 100%;
                max-width: 100%;
            }

            #list {
                width: 100% !important;
            }

            .sidebar-toggle {
                top: 7px;
                left: 10px;
                width: 35px;
                height: 35px;
                padding: 8px;
            }

            .navbar-default {
                padding-left: 50px;
            }
        }

        .glyphicon {
            display: none !important;
        }

        /* File upload styles */
        .upload-wrapper {
            position: relative;
            display: inline-block;
        }

        .file-preview-container {
            display: none;
            position: absolute;
            bottom: 100%;
            left: 0;
            background: white;
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 10px;
            margin-bottom: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            max-width: 300px;
            z-index: 1000;
        }

        .file-preview-container.active {
            display: block;
        }

        .file-preview-item {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
            padding: 5px;
            background: #f8f9fa;
            border-radius: 3px;
        }

        .file-preview-item:last-child {
            margin-bottom: 0;
        }

        .file-preview-name {
            flex-grow: 1;
            margin-right: 10px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .file-preview-remove {
            color: #dc3545;
            cursor: pointer;
            padding: 2px 5px;
        }

        .file-preview-remove:hover {
            color: #bd2130;
        }

        .upload-progress {
            height: 3px;
            width: 0;
            background-color: #007bff;
            position: absolute;
            bottom: 0;
            left: 0;
            transition: width 0.3s ease;
        }

        .upload-status {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 10px 20px;
            border-radius: 4px;
            background: #28a745;
            color: white;
            display: none;
            z-index: 1050;
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Remove unnecessary file input styles */
        .file-loading,
        .file-caption-name,
        .file-preview-detail-modal,
        .file-preview-frame,
        .file-preview-other,
        .file-actions,
        .file-upload-indicator,
        .file-footer-caption,
        .file-drop-zone {
            display: none !important;
        }

        .panel-primary {
            border-color: #ffffff;
        }

        .panel {
            margin-bottom: 20px;
            background-color: #fff;
            border: 0px solid transparent;
        }

        .panel-primary>.panel-heading {
            color: #000;
            background-color: #ffffff;
            border-color: #ffffff;
        }
    </style>
    <!-- Just for debugging purposes. Don't actually copy these 2 lines! -->
    <!--[if lt IE 9]>
    <script src="http://getbootstrap.com/assets/js/ie8-responsive-file-warning.js"></script><![endif]-->
    <script src="/scripts/bootstrap/ie-emulation-modes-warning.js?raw=true"></script>
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script type="text/javascript" src="/scripts/jquery-1.11.3.min.js?raw=true"></script>
    <script type="text/javascript" src="/scripts/struct.js?raw=true"></script>
    <script type="text/javascript" src="/scripts/timer.js?raw=true"></script>
    <script type="text/javascript" src="/scripts/marked.min.js"></script>
    <script type="text/javascript" src="/scripts/highlight/highlight.min.js"></script>

    <script type="text/javascript">
        //<![CDATA[
        var timer = new Timer(.5, function () {
        });
        var old_title = document.title;
        var dotted = '', user = struct.get("user") ? struct.get("user") : false;
        var markedOptions = {
            renderer: new marked.Renderer(),
            highlight: function (code, lang) {
                const language = hljs.getLanguage(lang) ? lang : 'plaintext';
                return hljs.highlight(code, {language}).value;
            },
            langPrefix: 'hljs language-', // highlight.js css expects a top-level 'hljs' class.
            pedantic: false,
            gfm: true,
            breaks: false,
            sanitize: false,
            smartypants: false,
            xhtml: false
        };

        // Check if user is logged in
        function checkAuthStatus() {
            console.log('Checking authentication status...');

            // First check if we already have the show_login variable set by the server
            var showLogin = '{%show_login%}';
            console.log('Server-side show_login:', showLogin);

            if (showLogin === 'true' || showLogin === 'false') {
                // Use the server-side variable to set initial visibility
                if (showLogin === 'true') {
                    console.log('Using server-side variable: User is not logged in');
                    $('#auth-forms').show();
                    $('#chat-interface').hide();
                    $('#user-info').hide();
                } else {
                    console.log('Using server-side variable: User is logged in');
                    $('#auth-forms').hide();
                    $('#chat-interface').show();
                    $('#user-info').show();
                    $('#current-username').text('{%username%}');
                }
                return;
            }

            // If server-side variable is not set, check via AJAX
            $.ajax({
                url: '/?q=auth/profile',
                type: 'GET',
                dataType: 'json',
                success: function(response) {
                    // User is logged in
                    console.log('User is logged in:', response.username);
                    $('#auth-forms').hide();
                    $('#chat-interface').show();
                    $('#user-info').show();
                    $('#current-username').text(response.username);
                },
                error: function() {
                    // User is not logged in
                    console.log('User is not logged in');
                    $('#auth-forms').show();
                    $('#chat-interface').hide();
                    $('#user-info').hide();
                }
            });
        }

        // Handle login form submission
        function setupLoginForm() {
            $('#login-form').submit(function(e) {
                e.preventDefault();

                var username = $('#login-username').val();
                var password = $('#login-password').val();

                // Clear previous errors
                $('#login-error').hide().text('');

                // Send login request
                $.ajax({
                    url: '/?q=auth/login',
                    type: 'POST',
                    data: {
                        username: username,
                        password: password
                    },
                    dataType: 'json',
                    success: function(response) {
                        console.log('Login successful:', response);
                        // Hide login form and show chat interface
                        $('#auth-forms').hide();
                        $('#chat-interface').show();
                        $('#user-info').show();
                        $('#current-username').text(response.username);
                        struct.save("user", response.username);
                        command("greeting");
                        // Reload the page to ensure everything is properly initialized
                        window.location.reload();
                    },
                    error: function(xhr) {
                        // Show error message
                        var errorMessage = 'Login failed. Please try again.';
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }
                        $('#login-error').text(errorMessage).show();
                    }
                });
            });
        }

        // Handle registration form submission
        function setupRegisterForm() {
            $('#register-form').submit(function(e) {
                e.preventDefault();

                var username = $('#register-username').val();
                var password = $('#register-password').val();
                var email = $('#register-email').val();
                var fullName = $('#register-fullname').val();

                // Clear previous errors
                $('#register-error').hide().text('');

                // Send registration request
                $.ajax({
                    url: '/?q=auth/register',
                    type: 'POST',
                    data: {
                        username: username,
                        password: password,
                        email: email,
                        fullName: fullName
                    },
                    dataType: 'json',
                    success: function(response) {
                        console.log('Registration successful:', response);
                        // Hide registration form and show chat interface
                        $('#auth-forms').hide();
                        $('#chat-interface').show();
                        $('#user-info').show();
                        $('#current-username').text(response.username);
                        // Reload the page to ensure everything is properly initialized
                        window.location.reload();
                    },
                    error: function(xhr) {
                        // Show error message
                        var errorMessage = 'Registration failed. Please try again.';
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }
                        $('#register-error').text(errorMessage).show();
                    }
                });
            });
        }

        // Handle logout
        function setupLogout() {
            $('#logout-link').click(function(e) {
                e.preventDefault();

                $.ajax({
                    url: '/?q=auth/logout',
                    type: 'POST',
                    success: function() {
                        // Reload the page to show login form
                        window.location.reload();
                    }
                });
            });
        }

        function update($data) {
            if (typeof ($data.message) != 'undefined') {
                placeholder = document.createElement('li');
                placeholder.setAttribute('class', 'content');
                placeholder.setAttribute('class', 'pre-wrapper');
                placeholder.innerHTML = "<span class='time'>" + $data.time + "</span> <span class='name'>" + $data.user + "</span>: ";
                $('#messages').append(placeholder);

                $text = $data.message;

                if ($data.user == 'ChatGPT') {
                    placeholder.innerHTML += "<span class='content'>";

                    // Check if the message contains PlantUML images
                    if ($text.indexOf("<placeholder-image>") >= 0) {
                        // Process the message with PlantUML images

                        // Extract all PlantUML images
                        var imgRegex = /<placeholder-image>(data:image\/png;base64,[^<]+)<\/placeholder-image>/g;
                        var matches = [];
                        var match;

                        // Find all image placeholders
                        while ((match = imgRegex.exec($text)) !== null) {
                            matches.push({
                                fullMatch: match[0],
                                imgData: match[1],
                                index: match.index
                            });
                        }

                        // Sort matches by their index in the original text to maintain order
                        matches.sort(function (a, b) {
                            return a.index - b.index;
                        });

                        console.log("Found " + matches.length + " PlantUML images");

                        // Create a copy of the text without the placeholder-image elements
                        var cleanText = $text;
                        for (var i = 0; i < matches.length; i++) {
                            cleanText = cleanText.replace(matches[i].fullMatch, '');
                        }

                        // Use animation timer for the clean text
                        $tmp = cleanText.replace(/<br\s*[\/]?>/gi, '\n');
                        k = 0;
                        animation_timer = new Timer(.01, function () {
                        });
                        animation_timer.setAction(function () {
                            if (k < $tmp.length) {
                                c = $tmp.charAt(k++);
                                if (c == '\n')
                                    placeholder.innerHTML += "  \n";
                                else
                                    placeholder.innerHTML += c;

                                if (c == ',') {
                                    this.setInterval(0.1);
                                } else {
                                    this.setInterval(0.01);
                                }

                                this.start();
                            } else this.complete();
                        });

                        animation_timer.start().complete(function () {
                            this.stop();
                            placeholder.innerHTML += "</span>";
                            $(placeholder).removeClass('pre-wrapper');
                            $(placeholder).addClass('chat-gpt');

                            // Parse the markdown content
                            var content = placeholder.textContent;
                            var parsedContent = marked.parse(content, markedOptions);

                            // Set the parsed content
                            placeholder.innerHTML = parsedContent;

                            // Find all pre code blocks with language-plantuml class
                            var codeBlocks = placeholder.querySelectorAll('pre code.language-plantuml');
                            console.log("Found " + codeBlocks.length + " PlantUML code blocks");

                            // Process each code block and add the corresponding image
                            for (var i = 0; i < Math.min(codeBlocks.length, matches.length); i++) {
                                console.log("Processing PlantUML block " + (i + 1));

                                // Create a simple image element after each code block
                                var img = document.createElement('img');
                                img.src = matches[i].imgData;
                                img.style.maxWidth = '100%';
                                img.style.marginTop = '10px';
                                img.style.marginBottom = '20px';

                                // Insert the image after the code block's parent (the pre element)
                                codeBlocks[i].parentNode.insertAdjacentElement('afterend', img);
                            }

                            // Add CSS for the spinner
                            if (!document.getElementById('spinner-style')) {
                                var style = document.createElement('style');
                                style.id = 'spinner-style';
                                style.innerHTML = `
                .spinner {
                  border: 4px solid #f3f3f3;
                  border-top: 4px solid #3498db;
                  border-radius: 50%;
                  width: 30px;
                  height: 30px;
                  animation: spin 2s linear infinite;
                  margin: 0 auto 10px auto;
                }

                @keyframes spin {
                  0% { transform: rotate(0deg); }
                  100% { transform: rotate(360deg); }
                }

                .loading-text {
                  color: #666;
                  font-size: 14px;
                }
              `;
                                document.head.appendChild(style);
                            }
                        });
                    } else {
                        // For regular messages without PlantUML, use the existing animation
                        $tmp = $text.replace(/<br\s*[\/]?>/gi, '\n');
                        k = 0;
                        animation_timer = new Timer(.01, function () {
                        });
                        animation_timer.setAction(function () {
                            if (k < $tmp.length) {
                                c = $tmp.charAt(k++);
                                if (c == '\n')
                                    placeholder.innerHTML += "  \n";
                                else
                                    placeholder.innerHTML += c;

                                if (c == ',') {
                                    this.setInterval(0.1);
                                } else {
                                    this.setInterval(0.01);
                                }

                                this.start();
                            } else {
                                this.complete();
                            }
                        });
                        animation_timer.start().complete(function () {
                            this.stop();
                            placeholder.innerHTML += "</span>";
                            $(placeholder).removeClass('pre-wrapper');
                            $(placeholder).addClass('chat-gpt');
                            placeholder.innerHTML = marked.parse(placeholder.textContent, markedOptions);
                        });
                    }
                } else {
                    placeholder.innerHTML += "<span class='content'>" + $data.message + "</span>";
                }
                $('#list').animate({scrollTop: $('#messages').height()}, 'fast');

                if (document.title == old_title) {
                    document.title = 'New Message(s) Received!';
                } else {
                    document.title = old_title;
                }
            } else {
                if (typeof ($data.cmd) != 'undefined') {
                    if (!user) {
                        $("#modal").modal();
                        return false;
                    }

                    $_user = $data.user;
                    if ($_user) {
                        switch ($data.cmd) {
                            case 'onblur':
                                document.title = old_title;
                                timer.stop();
                                break;
                            case 'greeting':
                                $li = $("<li />");
                                $li.html("System Notification: " + $data.user + " joined this conversation.");
                                $('#messages').append($li);
                                $('#list').animate({scrollTop: $('#messages').height()}, 'fast');
                                break;
                            case 'session-timeout':
                                $li = $("<li />");
                                $li.html("System Notification: " + $data.user + " left from this conversation.");
                                $('#messages').append($li);
                                $('#list').animate({scrollTop: $('#messages').height()}, 'fast');
                                break;
                            case 'expired':
                                $li = $("<li />");
                                $li.html("System Notification: It's an expired conversation, you have to refresh the current page or request a new meeting code.");
                                $('#messages').append($li);
                                $('#list').animate({scrollTop: $('#messages').height()}, 'fast');
                                break;
                            default:
                                timer.setAction(function () {
                                    document.title = $_user + " is typing" + dotted;
                                    dotted += '.';
                                    if (dotted.length > 3) this.complete();
                                    this.start();
                                });
                                timer.start().complete(function () {
                                    dotted = '';
                                });//.stop(4);
                        }
                    }
                }
            }
        }

        function command(cmd) {
            $.ajax({
                type: "POST",
                url: "[%LINK:talk/command%]",
                dataType: "json",
                data: {cmd: cmd}
            }).done(function (msg) {

            }).fail(function (msg) {
                switch (msg.responseJSON.error) {
                    case 'session-timeout':
                        $li = $("<li />");
                        $li.html("System Notification:\t" + $data.user + " left from this conversation.");
                        $('#messages').append($li);
                        $('#list').animate({scrollTop: $('#messages').height()}, 'fast');

                        if (confirm("Your session is timed out, Do you want to reload the conversation?")) {
                            $.ajax({
                                type: "POST",
                                url: $('#link').text()
                            }).done(function (msg) {
                            });
                        }
                        break;
                    case 'expired':
                        $li = $("<li />");
                        $li.html("System Notification:\tIt's an expired conversation, you have to refresh the current page or request a new meeting code.");
                        $('#messages').append($li);
                        $('#list').animate({scrollTop: $('#messages').height()}, 'fast');
                        break;
                    case 'missing user':
                        if (user) {
                            $.ajax({
                                type: "POST",
                                url: "{%start_url%}/" + user
                            }).done(function (msg) {
                            });
                        } else {
                            $("#modal").modal();
                        }
                        break;
                    default:
                        break;
                }

                console.log('Fail.');
                console.log(msg);
            });
        }

        function save() {
            $message = $("#text").html();
            image = "";
            if ($("#topic").text().toLowerCase().indexOf("@chatgpt") != -1) {
                $message = "@ChatGPT " + $("#text").text() + "\n";

                $("#text").find("img").each(function () {
                    image = $(this).attr("src");
                });
            }

            $.ajax({
                type: "POST",
                url: "[%LINK:talk/save%]",
                dataType: "json",
                data: {text: $message, time: new Date().getTime(), image: image}
            }).done(function (msg) {
                $("#text").html('');
            });

            // $("li").even().addClass("even);
        }

        var is_running = false;
        var connection_timer = new Timer(5, function () {
            autoupdate()
        });
        var blur_timer = new Timer(5);

        function autoupdate() {
            if (!is_running) {
                is_running = true;
                $.getJSON("{%meeting_update_url%}", function (data) {
                    update(data);
                    is_running = false;
                }).done(function (msg) {
                    autoupdate();
                    is_running = false;
                }).fail(function (err) {
                    if (typeof (err.responseJSON) != 'undefined') {
                        $msg = err.responseJSON;
                        if ($msg.error == "expired") {
                            command("expired");
                        } else if ($msg.error == "session-timeout") {
                            command("session-timeout");
                        } else {
                            connection_timer.start();
                            is_running = false;
                            console.log("The message has not been sent successfully.error:" + $msg.error);
                            console.log($msg);
                        }
                    } else {
                        connection_timer.start();
                        is_running = false;
                        console.log("The message has not been sent successfully.");
                        console.log(err);
                    }
                });
            }
        }

        var n = 0;
        var current_position = 0;
        window.key = [];

        function currentX(_, s, current_position) {
            len = 0;
            window.key = [];
            for (var i = 0; i < s.length; i++) {
                _.html(s.charAt(i));
                window.key[i] = _.width() > 0 ? _.width() : 7;
                len += window.key[i];
                if (i == current_position) break;
            }

            return len;
        }

        $(function () {
            // Initialize authentication
            checkAuthStatus();
            setupLoginForm();
            setupRegisterForm();
            setupLogout();

            $("#button").click(function () {
                save();
                timer.stop();
            });

            //Start here.
            $("#text").keypress(function (event) {
                if (event.which == 13) {
                    save();
                    timer.stop();
                }
            });

            $("#text").focus(function (event) {
                command("onfocus");
                document.title = old_title;
            });

            $("#text").blur(function (event) {
                blur_timer.setAction(function () {
                    command("onblur");
                    document.title = old_title;
                });
                blur_timer.start();
            });

            $("#sender").submit(function (event) {
                event.preventDefault();
                save();
            });

            var post_timer = new Timer(.2, function () {
                if (n++ < 200) {
                    $("#text").text(user + ' posts ' + n);
                    $("#sender").submit();
                } else this.complete();
                this.start();
            });

            $("#test").click(function (event) {
                event.preventDefault();
                post_timer.start().complete(function () {
                    this.stop();
                });
            });

            autoupdate();

            $(".pad").hover(function () {
                $(this).addClass("hover");
                $("#text").focus();
            }, function () {
                $(this).removeClass("hover");
            });

            $(".text").click(function () {
                $("#text").focus();
            });

            $("#dialog_submit").click(function () {
                $.ajax({
                    type: "POST",
                    url: "{%start_url%}/" + $("#nickname").val()
                }).done(function (msg) {
                    $("#modal").modal('hide');
                    user = $("#nickname").val();
                    struct.save("user", user);
                    command("greeting");
                });
            });

            $("#topic_submit").click(function () {
                $.ajax({
                    type: "POST",
                    url: "[%LINK:talk/topic%]",
                    data: {topic: $("#brief").val()}
                }).done(function (msg) {
                    $("#topic_modal").modal('hide');
                    $("#topic").html($("#brief").val());
                });
            });

            $("#nickname").keyup(function (event) {
                if (event.which == 13) {
                    $("#dialog_submit").click();
                }
            });

            if (!$("#topic").text()) {
                $("#topic_modal").modal();
            }

            $("#link").click(function () {
                navigator.clipboard.writeText(this.innerText)
                    .then(() => {
                        console.log('Copied.');
                    })
                    .catch(err => {
                        console.error('Failed to copy url:', err);
                    });
                $.ajax({
                    type: "POST",
                    url: "{%meeting_qr_code_url%}",
                    data: {meeting_code: "{%meeting_code%}"}
                }).done(function (msg) {
                    $("#matrix").css({"background": "url(" + msg + ") transparent center center"});
                    $("#matrix > span").hide();
                    $("#matrix").show();
                });
            });

            $("#link").mouseover(function () {
                $("#matrix").show();
            });

            $("#link").mouseout(function () {
                $("#matrix").hide();
            });

            $("#text").on('paste', function (e) {
                if (e.originalEvent) {
                    var original = e.originalEvent;
                    for (var i = 0; i < original.clipboardData.items.length; i++) {
                        if (original.clipboardData.items[i].kind == "file" && original.clipboardData.items[i].type == "image/png") {
                            var file = original.clipboardData.items[i].getAsFile();
                            var reader = new FileReader();
                            reader.onloadend = function () {
                                var img = $("<img />");
                                img.attr('src', this.result);
                                $('#text').append(img);
                            }
                            reader.readAsDataURL(file);
                            break;
                        }
                    }
                }
            });

/*            $("#attachment").fileinput({
                uploadAsync: false,
                showPreview: false,
                showCaption: false,
                maxFileCount: 2,
                uploadUrl: "/?q=talk/upload", // server upload action
            });*/

            /*$("#attachment").on('filebatchuploadsuccess', function (event, data, previewId, index) {
                var form = data.form, files = data.files, extra = data.extra,
                    response = data.response, reader = data.reader;

                $ul = $("<ul />");
                for (var i = 0; i < response.length; i++) {
                    if (response[i].type.indexOf("image/") != -1) {
                        e = $("<img />");
                        e.attr("src", response[i].file);
                    } else {
                        e = $("<a target='_blank' >" + response[i].file + "</a>");
                        e.attr("href", response[i].file);
                    }

                    $li = $("<li />");
                    $li.append(e);
                    $ul.append($li);
                }

                $("#text").append($ul);
            });*/

            $('a.theme').click(function () {
                $('#list').removeClass().toggleClass($(this).text().toLowerCase().replace(/\s/, "-"));
                $('a.theme').find('svg').attr('class', 'bi bi-check hidden');
                $(this).find('svg').attr('class', 'bi bi-check');
            });

            // Add Sidebar functionality
            class Sidebar {
                constructor() {
                    this.sidebar = null;
                    this.toggle = null;
                    this.contentWrapper = null;
                    this.isActive = false;
                    this.init();
                }

                init() {
                    this.createSidebar();
                    this.setupEventListeners();
                    this.updateOnlineUsers();
                }

                createSidebar() {
                    // Create sidebar HTML
                    const sidebarHTML = `
                        <div class="sidebar">
                            <div class="sidebar-header">
                                <h3>Small Talk</h3>
                            </div>
                            <ul class="sidebar-menu">
                                <li><i class="fas fa-home"></i> Home</li>
                                <li><i class="fas fa-cog"></i> Settings</li>
                                <li><i class="fas fa-book"></i> Libraries</li>
                                <li><i class="fas fa-history"></i> Chat History</li>
                            </ul>
                            <div class="sidebar-section">
                                <h3>Online Users</h3>
                                <ul class="online-users">
                                    <!-- Dynamically populated -->
                                </ul>
                            </div>
                            <div class="sidebar-section">
                                <h3>Room Info</h3>
                                <p>Topic: <span id="sidebar-topic"></span></p>
                                <p>Active Since: <span id="sidebar-active-time"></span></p>
                            </div>
                        </div>
                        <div class="sidebar-toggle">
                            <span></span>
                            <span></span>
                            <span></span>
                        </div>
                    `;

                    // Insert sidebar into DOM
                    document.body.insertAdjacentHTML('afterbegin', sidebarHTML);

                    // Store references
                    this.sidebar = document.querySelector('.sidebar');
                    this.toggle = document.querySelector('.sidebar-toggle');
                    this.contentWrapper = document.querySelector('.container');
                    this.contentWrapper.classList.add('content-wrapper');
                }

                setupEventListeners() {
                    this.toggle.addEventListener('click', () => this.toggleSidebar());

                    // Handle window resize
                    window.addEventListener('resize', () => {
                        if (window.innerWidth <= 768) {
                            this.contentWrapper.classList.remove('shifted');
                            document.querySelectorAll('.container').forEach(container => {
                                container.classList.remove('shifted');
                            });
                        } else if (this.isActive) {
                            this.contentWrapper.classList.add('shifted');
                            document.querySelectorAll('.container').forEach(container => {
                                container.classList.add('shifted');
                            });
                        }

                        // Adjust list width after resize
                        this.adjustListWidth();
                    });

                    // Setup menu item clicks
                    document.querySelectorAll('.sidebar-menu li').forEach(item => {
                        item.addEventListener('click', (e) => this.handleMenuClick(e));
                    });
                }

                toggleSidebar() {
                    this.isActive = !this.isActive;
                    this.sidebar.classList.toggle('active');
                    this.toggle.classList.toggle('active');
                    this.contentWrapper.classList.toggle('shifted');
                    // Toggle shifted class on all elements
                }

                handleMenuClick(e) {
                    const action = e.target.textContent.trim().toLowerCase();
                    switch(action) {
                        case 'home':
                            // Handle home action
                            window.location.href = '/?q=talk';
                            break;
                        case 'settings':
                            // Show settings modal
                            break;
                        case 'libraries':
                            // Go to libraries page
                            window.location.href = '/?q=libraries';
                            break;
                        case 'chat history':
                            // Show chat history
                            break;
                    }
                }

                adjustListWidth() {
                    // Remove the width adjustment logic
                }

                updateOnlineUsers() {
                    const onlineUsersList = this.sidebar.querySelector('.online-users');
                    // Example of updating online users
                    const updateUsers = () => {
                        if (user) {
                            const userHTML = `
                                <li>
                                    <span class="user-status status-online"></span>
                                    ${user}
                                </li>
                            `;
                            onlineUsersList.innerHTML = userHTML;
                        }
                    };

                    // Update initially
                    updateUsers();

                    // Update periodically
                    setInterval(updateUsers, 30000);
                }
            }

            // Initialize sidebar after DOM is loaded
            const sidebar = new Sidebar();

            // Update sidebar topic when topic changes
            const updateSidebarTopic = () => {
                const topicElement = document.querySelector('#sidebar-topic');
                if (topicElement) {
                    topicElement.textContent = $("#topic").text() || 'No topic set';
                }
            };

            // Update topic when it changes
            const originalTopicSubmit = $("#topic_submit").click;
            $("#topic_submit").click(function() {
                originalTopicSubmit.apply(this, arguments);
                updateSidebarTopic();
            });

            // Initial topic update
            updateSidebarTopic();

            // Set initial active time
            const activeTimeElement = document.querySelector('#sidebar-active-time');
            if (activeTimeElement) {
                const now = new Date();
                activeTimeElement.textContent = now.toLocaleTimeString();
            }

            // File Upload Handling
            const fileInput = document.getElementById('attachment');
            const previewContainer = document.querySelector('.file-preview-container');
            const previewList = document.querySelector('.file-preview-list');
            const uploadProgress = document.querySelector('.upload-progress');
            let selectedFiles = [];

            // Remove the click handler that was preventing the default behavior
            document.querySelector('.btn-file').removeEventListener('click', function(e) {
                e.preventDefault();
                this.querySelector('input[type="file"]').click();
            });

            // Show preview container when hovering over the upload wrapper
            document.querySelector('.upload-wrapper').addEventListener('mouseenter', function() {
                if (selectedFiles.length > 0) {
                    previewContainer.style.display = 'block';
                }
            });

            document.querySelector('.upload-wrapper').addEventListener('mouseleave', function(e) {
                if (!e.relatedTarget || !e.relatedTarget.closest('.file-preview-container')) {
                    previewContainer.style.display = 'none';
                }
            });

            // Handle file selection
            fileInput.addEventListener('change', function(e) {
                const files = Array.from(e.target.files);
                selectedFiles = files;

                // Clear previous preview
                previewList.innerHTML = '';

                // Add new previews
                files.forEach(file => {
                    const item = document.createElement('div');
                    item.className = 'file-preview-item';

                    const name = document.createElement('div');
                    name.className = 'file-preview-name';
                    name.textContent = file.name;

                    const remove = document.createElement('div');
                    remove.className = 'file-preview-remove';
                    remove.innerHTML = '×';
                    remove.onclick = (e) => {
                        e.stopPropagation();
                        selectedFiles = selectedFiles.filter(f => f !== file);
                        item.remove();
                        if (selectedFiles.length === 0) {
                            previewContainer.style.display = 'none';
                            fileInput.value = '';
                        }
                    };

                    item.appendChild(name);
                    item.appendChild(remove);
                    previewList.appendChild(item);
                });

                if (files.length > 0) {
                    previewContainer.style.display = 'block';
                }
            });

            // Handle file upload
            function uploadFiles(files) {
                if (files.length === 0) return;

                const formData = new FormData();
                files.forEach(file => {
                    formData.append('attachment', file);
                });

                // Show progress bar
                uploadProgress.style.display = 'block';

                $.ajax({
                    url: '/?q=talk/upload',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    xhr: function() {
                        const xhr = new XMLHttpRequest();
                        xhr.upload.addEventListener('progress', function(e) {
                            if (e.lengthComputable) {
                                const percent = (e.loaded / e.total) * 100;
                                uploadProgress.style.width = percent + '%';
                            }
                        });
                        return xhr;
                    }
                }).done(function(response) {
                    // Handle successful upload
                    uploadProgress.style.width = '100%';

                    // Parse response and add files to message
                    const files = JSON.parse(response);
                    files.forEach(file => {
                        if (file.type.startsWith('image/')) {
                            const img = $('<img />');
                            img.attr('src', file.file);
                            $('#text').append(img);
                        } else {
                            const link = $('<a target="_blank"></a>');
                            link.attr('href', file.file);
                            link.text(file.originalName || 'Download File');
                            $('#text').append(link);
                        }
                    });

                    // Show success message
                    showUploadStatus('Files uploaded successfully!');

                    // Reset upload state
                    setTimeout(() => {
                        uploadProgress.style.width = '0';
                        uploadProgress.style.display = 'none';
                        previewContainer.style.display = 'none';
                        selectedFiles = [];
                        fileInput.value = '';
                    }, 1000);
                }).fail(function(err) {
                    // Handle upload error
                    uploadProgress.style.backgroundColor = '#dc3545';
                    showUploadStatus('Upload failed. Please try again.', 'error');
                    console.error('Upload failed:', err);
                });
            }

            // Show upload status message
            function showUploadStatus(message, type = 'success') {
                const status = document.createElement('div');
                status.className = 'upload-status';
                status.style.backgroundColor = type === 'success' ? '#28a745' : '#dc3545';
                status.textContent = message;
                document.body.appendChild(status);

                // Show status
                status.style.display = 'block';

                // Remove after 3 seconds
                setTimeout(() => {
                    status.style.opacity = '0';
                    setTimeout(() => status.remove(), 300);
                }, 3000);
            }

            // Modify the existing save function to handle file uploads
            const originalSave = save;
            save = function() {
                if (selectedFiles.length > 0) {
                    uploadFiles(selectedFiles);
                }
                originalSave();
            };
        });
        //]]>
    </script>
</head>
<body>


<!-- Begin page content -->
<div class="container">
    <!-- Fixed navbar -->
    <nav class="navbar navbar-default navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar"
                        aria-expanded="false" aria-controls="navbar">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="#">Small Talk</a>
            </div>
            <div id="navbar" class="collapse navbar-collapse">
                <ul class="nav navbar-nav">
                    <li class="dropdown">
                        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true"
                           aria-expanded="false">Settings <span class="caret"></span></a>
                        <ul class="dropdown-menu">
                            <li>
                                <a class="btn disabled" href="#" role="button" data-toggle="dropdown" aria-expanded="false">Appearance
                                    <span class="caret"></span></a>
                            </li>
                            <li role="separator" class="divider"></li>
                            <li><a class="dropdown-item theme" href="#">Default
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                                     class="bi bi-check" viewBox="0 0 16 16">
                                    <path d="M10.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.267.267 0 0 1 .02-.022z"/>
                                </svg>
                            </a></li>
                            <li><a class="dropdown-item theme" href="#">Dark Green
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                                     class="bi bi-check hidden" viewBox="0 0 16 16">
                                    <path d="M10.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.267.267 0 0 1 .02-.022z"/>
                                </svg>
                            </a></li>
                            <li><a class="dropdown-item theme" href="#">Light Green
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                                     class="bi bi-check hidden" viewBox="0 0 16 16">
                                    <path d="M10.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.267.267 0 0 1 .02-.022z"/>
                                </svg>
                            </a></li>
                        </ul>
                    </li>
                    <li class="dropdown">
                        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true"
                           aria-expanded="false">Help <span class="caret"></span></a>
                        <ul class="dropdown-menu">
                            <li><a href="#">Manual</a></li>
                            <li role="separator" class="divider"></li>
                            <li><a href="#">About</a></li>
                        </ul>
                    </li>
                </ul>
            </div><!--/.nav-collapse -->
        </div>
    </nav>
    <div class="pageheader"></div>

    <!-- Login and Registration Forms -->
    <div id="auth-forms" style="display: {%show_login%} === 'true' ? 'block' : 'none';">
        <div class="row">
            <div class="col-md-6">
                <div class="panel panel-primary">
                    <div class="panel-heading">
                        <h3 class="panel-title">Login</h3>
                    </div>
                    <div class="panel-body">
                        <form id="login-form">
                            <div class="form-group">
                                <label for="login-username">Username</label>
                                <input type="text" class="form-control" id="login-username" placeholder="Enter username">
                            </div>
                            <div class="form-group">
                                <label for="login-password">Password</label>
                                <input type="password" class="form-control" id="login-password" placeholder="Password">
                            </div>
                            <div class="alert alert-danger" id="login-error" style="display: none;"></div>
                            <button type="submit" class="btn btn-primary">Login</button>
                        </form>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h3 class="panel-title">Register</h3>
                    </div>
                    <div class="panel-body">
                        <form id="register-form">
                            <div class="form-group">
                                <label for="register-username">Username</label>
                                <input type="text" class="form-control" id="register-username" placeholder="Enter username">
                            </div>
                            <div class="form-group">
                                <label for="register-password">Password</label>
                                <input type="password" class="form-control" id="register-password" placeholder="Password">
                            </div>
                            <div class="form-group">
                                <label for="register-email">Email (optional)</label>
                                <input type="email" class="form-control" id="register-email" placeholder="Email">
                            </div>
                            <div class="form-group">
                                <label for="register-fullname">Full Name (optional)</label>
                                <input type="text" class="form-control" id="register-fullname" placeholder="Full Name">
                            </div>
                            <div class="alert alert-danger" id="register-error" style="display: none;"></div>
                            <button type="submit" class="btn btn-default">Register</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Chat Interface -->
    <div id="chat-interface" style="display: {%show_login%} === 'true' ? 'none' : 'block';">
        <p>Welcome to use smalltalk application!</p>
        <p id="topic">{%topic%}</p>
        <div id="user-info" style="display: {%show_login%} === 'true' ? 'none' : 'block';">
            <p>Logged in as: <strong id="current-username">{%username%}</strong> <a href="#" id="logout-link">(Logout)</a></p>
        </div>
        <div id="list">
            <ul id="messages">
                <li>Type your message(s) in the below input box...</li>
            </ul>
        </div>
        <form id="sender">
            <div class="note">Share the link to invite others join this conversation: <a id="link"
                                                                                         href="javascript:void(0)">{%meeting_url%}</a>
                <div id="matrix"><img/><span>Click For QR Code</span></div>
            </div>
            <div class="pad">
                <div class="text">
                    <div contenteditable="true" id="text"></div>
                    <input type="button" id="button" value="Send" class="btn btn-primary btn-sm"/>
                    <div class="upload-wrapper">
                        <span class="btn btn-file">
                            <i class="fas fa-paperclip"></i>
                            <input id="attachment" name="attachment" type="file" multiple="true"/>
                        </span>
                        <div class="file-preview-container">
                            <div class="file-preview-list"></div>
                        </div>
                        <div class="upload-progress"></div>
                    </div>
                </div>
                <span class="arrowbox">
                    <b class="arrow arrowline"></b>
                    <b class="arrow arrowbg"></b>
                </span>
            </div>
        </form>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span
                        aria-hidden="true"></span></button>
                <h4 class="modal-title" id="myModalLabel">Dialog</h4>
            </div>
            <div class="modal-body">
                <label for="nickname">Your Name:</label><input type="text" class="form-control" name="nickname"
                                                               id="nickname"/>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="dialog_submit">Save changes</button>
            </div>
        </div>
    </div>
</div>
<!-- Modal -->
<div class="modal fade" id="topic_modal" tabindex="-1" role="dialog" aria-labelledby="ModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span
                        aria-hidden="true"></span></button>
                <h4 class="modal-title" id="ModalLabel">Dialog</h4>
            </div>
            <div class="modal-body">
                <label for="brief">Topics / Questions:</label><textarea class="form-control" name="brief"
                                                                        id="brief"></textarea>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="topic_submit">Save changes</button>
            </div>
        </div>
    </div>
</div>

<footer class="footer">
    <div class="container">
        <p class="text-muted"> © 2017 </p>
    </div>
</footer>

<!-- Bootstrap core JavaScript
================================================== -->
<!-- Placed at the end of the document so the pages load faster -->
<script src="/scripts/bootstrap/bootstrap.min.js?raw=true"></script>
<!-- IE10 viewport hack for Surface/desktop Windows 8 bug -->
<script src="/scripts/bootstrap/ie10-viewport-bug-workaround.js?raw=true"></script>
</body>
</html>
